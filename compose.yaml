services:
  server:
    build: .
    entrypoint: ["server"]
    env_file:
      - example.env
    environment:
      - BRICK_POSTGRES_DSN=postgres://postgres:postgres@postgres:5432/postgres
      - BRICK_SERVER_HOST=0.0.0.0
      - BRICK_SERVER_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres-up:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 3s
      timeout: 30s
      retries: 10
  postgres-up:
    build: .
    entrypoint: ["postgres-up"]
    env_file:
      - example.env
    environment:
      - BRICK_POSTGRES_DSN=postgres://postgres:postgres@postgres:5432/postgres
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:17.0-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 3s
      timeout: 30s
      retries: 10

  minio:
    image: quay.io/minio/minio:latest
    command: server --console-address ":9001" /data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:4.0-alpine
    hostname: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 30s
      retries: 3


volumes:
  postgres-data:
  minio-data:
  rabbitmq-data:
