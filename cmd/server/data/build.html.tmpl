<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF from Markdown | Brick</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <link rel="shortcut icon" href="/static/images/favicon.ico" />
    <link rel="stylesheet" href="/static/styles/kanit.css" />
    <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
    <script
      src="https://unpkg.com/htmx.org@2.0.3"
      integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq"
      crossorigin="anonymous"
    ></script>
  </head>
  <body
    class="flex min-h-screen flex-col bg-white text-stone-700 dark:bg-stone-900 dark:text-stone-300"
  >
    {{template "app_header"}}
    {{template "build_main"}}
    {{template "app_footer"}}
  </body>
</html>

{{define "build_main"}}
  <main id="build_main" class="mb-auto p-5">
    <div class="container mx-auto">
      <h1 class="text-4xl font-extrabold text-stone-900 dark:text-white">
        New
      </h1>
      <p class="my-5">
        Upload input files and press the build button to start a new build.
      </p>
      <div>
        <div
          id="build_filesDragdrop"
          hx-target="#build_files"
          hx-post="/build_filesChangeToFiles"
          hx-encoding="multipart/form-data"
          hx-trigger="app_script"
          hx-include="#build_filesData > :not(.build_filesDataFileData)"
        >
          <div id="build_files">{{template "build_files"}}</div>
        </div>
        <input
          id="build_filesChoose"
          class="hidden"
          type="file"
          multiple
          hx-target="#build_files"
          hx-post="/build_filesChangeToFiles"
          hx-encoding="multipart/form-data"
          hx-trigger="app_script"
          hx-include="#build_filesData > :not(.build_filesDataFileData)"
        />
        <div id="build_filesData" class="hidden"></div>
      </div>
      <div class="my-5 flex gap-x-2.5">
        <button
          class="rounded-lg border-2 border-black bg-black px-5 py-2.5 font-semibold text-white hover:bg-[#1F1C1A] active:bg-stone-800 dark:border-white dark:bg-white dark:text-stone-900 dark:hover:bg-stone-100 dark:active:bg-stone-200"
          type="button"
          hx-target="#build_main"
          hx-swap="outerHTML"
          hx-post="/build_buildButtonClickToMain"
          hx-encoding="multipart/form-data"
          hx-include="#build_filesData"
          hx-headers="{{json "X-Idempotency-Key" uuid}}"
        >
          Build
        </button>
        <button
          id="build_clearButton"
          class="rounded-lg border-2 border-stone-200 bg-white px-5 py-2.5 font-semibold text-stone-900 hover:bg-stone-50 active:bg-stone-100 dark:border-stone-700 dark:bg-stone-900 dark:text-white dark:hover:bg-[#262221] dark:active:bg-stone-800"
          type="button"
        >
          Clear
        </button>
      </div>
    </div>
  </main>
  <script type="module">
    /**
     * @param {DirectoryReader} directoryReader
     * @returns {Promise<FileSystemEntry[]>}
     */
    async function readEntries(directoryReader) {
      return new Promise((resolve, reject) => {
        directoryReader.readEntries(resolve, reject);
      });
    }

    /**
     * @param {DirectoryReader} directoryReader
     * @returns {Promise<FileSystemEntry[]>}
     */
    async function readAllEntries(directoryReader) {
      let entries = [];
      let currEntries = await readEntries(directoryReader);
      while (currEntries.length > 0) {
        entries.push(...currEntries);
        currEntries = await readEntries(directoryReader);
      }
      return entries;
    }

    /**
     * @param {DataTransferItemList} dataTransferItems
     * @returns {Promise<FileSystemEntry[]>}
     */
    async function entriesFromDataTransferItems(dataTransferItems) {
      /** @type {FileSystemEntry[]} */
      let entries = [];
      /** @type {FileSystemEntry[]} */
      let queue = [];
      for (let i = 0; i < dataTransferItems.length; i++) {
        let entry = dataTransferItems[i].webkitGetAsEntry();
        if (entry === null) {
          throw new Error("item is not FileSystemEntry");
        }
        queue.push(entry);
      }
      while (queue.length > 0) {
        let entry = queue.shift();
        entries.push(entry);
        if (entry.isDirectory) {
          /** @type {FileSystemDirectoryEntry} */
          let directoryEntry = entry;
          let directoryReader = directoryEntry.createReader();
          queue.push(...(await readAllEntries(directoryReader)));
        }
      }
      return entries;
    }

    /**
     * @param {FileSystemFileEntry} fileEntry
     * @returns {Promise<File>}
     */
    async function file(fileEntry) {
      return new Promise((resolve, reject) => {
        fileEntry.file(resolve, reject);
      });
    }

    /**
     * @param {File[]} files
     * @returns {FileList}
     */
    function fileListFromFiles(files) {
      let dataTransfer = new DataTransfer();
      for (let file of files) {
        dataTransfer.items.add(file);
      }
      return dataTransfer.files;
    }

    // build_filesDragdrop.
    let documentDragdrop = document.getElementById("build_filesDragdrop");
    if (documentDragdrop === null) {
      throw new Error("#build_filesDragdrop not found");
    }
    documentDragdrop.addEventListener("dragover", function (event) {
      event.preventDefault();
    });
    documentDragdrop.addEventListener("drop", async function (event) {
      event.preventDefault();

      let dataTransfer = event.dataTransfer;
      if (dataTransfer === null) {
        throw new Error("dataTransfer is null");
      }

      let inputs = [];
      let entries = await entriesFromDataTransferItems(dataTransfer.items);
      for (let [i, entry] of entries.entries()) {
        let nameInput = document.createElement("input");
        nameInput.type = "text";
        nameInput.name = `files/${i}/name`;
        nameInput.value = entry.fullPath;
        inputs.push(nameInput);

        let typeInput = document.createElement("input");
        typeInput.type = "text";
        typeInput.name = `files/${i}/type`;
        typeInput.value = entry.isFile ? "regular" : "directory";
        inputs.push(typeInput);

        if (entry.isFile) {
          let dataInput = document.createElement("input");
          dataInput.classList.add("build_filesDataFileData");
          dataInput.type = "file";
          dataInput.name = `files/${i}/data`;
          dataInput.files = fileListFromFiles([await file(entry)]);
          inputs.push(dataInput);
        }
      }

      let documentFormDataEl = document.getElementById("build_filesData");
      if (documentFormDataEl === null) {
        throw new Error("#build_filesData not found");
      }
      documentFormDataEl.replaceChildren(...inputs);

      window.htmx.trigger(event.target, "app_script");
    });

    // build_filesChoose.
    let filesChoose = document.getElementById("build_filesChoose");
    if (filesChoose === null) {
      throw new Error("#build_filesChoose not found");
    }
    filesChoose.addEventListener("change", async function (event) {
      event.preventDefault();

      let inputs = [];
      let files = event.target.files;
      for (let i = 0; i < files.length; i++) {
        let nameInput = document.createElement("input");
        nameInput.type = "text";
        nameInput.name = `files/${i}/name`;
        nameInput.value = files[i].name;
        inputs.push(nameInput);

        let typeInput = document.createElement("input");
        typeInput.type = "text";
        typeInput.name = `files/${i}/type`;
        typeInput.value = "regular";
        inputs.push(typeInput);

        let dataInput = document.createElement("input");
        dataInput.classList.add("build_filesDataFileData");
        dataInput.type = "file";
        dataInput.name = `files/${i}/data`;
        dataInput.files = fileListFromFiles([files[i]]);
        inputs.push(dataInput);
      }

      let documentFormDataEl = document.getElementById("build_filesData");
      if (documentFormDataEl === null) {
        throw new Error("#build_filesData not found");
      }
      documentFormDataEl.replaceChildren(...inputs);

      window.htmx.trigger(event.target, "app_script");
    });

    // build_clearButton.
    let clearButton = document.getElementById("build_clearButton");
    if (clearButton === null) {
      throw new Error("#build_clearButton not found");
    }
    clearButton.addEventListener("click", async function (event) {
      event.preventDefault();
      let filesChoose = document.getElementById("build_filesChoose");
      if (filesChoose === null) {
        throw new Error("#build_filesChoose not found");
      }
      filesChoose.files = fileListFromFiles([]);
      filesChoose.dispatchEvent(new Event("change"));
    });
  </script>
{{end}}

{{define "build_files"}}
  {{if .TreeFiles}}
    {{template "build_filesWithFiles" .}}
  {{else}}
    {{template "build_filesWithoutFiles" .}}
  {{end}}
{{end}}

{{define "build_filesWithoutFiles"}}
  <div
    class="my-5 rounded-lg border-2 border-dashed border-stone-200 px-2.5 py-20 dark:border-stone-700"
  >
    <p class="my-2.5 text-center font-semibold text-stone-900 dark:text-white">
      Drag and drop or
      <button id="build_filesChooseButton" class="underline" type="button">
        choose files
      </button>
    </p>
    <p class="my-2.5 text-center">Tip: Folders can also be dropped here</p>
  </div>
  <script type="module">
    // build_filesChooseButton.
    let filesInputButton = document.getElementById("build_filesChooseButton");
    if (filesInputButton === null) {
      throw new Error("#build_filesChooseButton not found");
    }
    filesInputButton.addEventListener("click", async function (event) {
      event.preventDefault();
      let filesChoose = document.getElementById("build_filesChoose");
      if (filesChoose === null) {
        throw new Error("#build_filesChoose not found");
      }
      filesChoose.click();
    });
  </script>
{{end}}

{{define "build_filesWithFiles"}}
  <div
    class="my-5 rounded-lg border-2 border-stone-200 p-2.5 dark:border-stone-700"
  >
    <ul>
      {{range .TreeFiles}}
        <li>{{template "build_filesTreeFile" .}}</li>
      {{end}}
    </ul>
  </div>
{{end}}

{{define "build_filesTreeFile"}}
  <div>
    <div class="inline-flex items-baseline">
      {{if eq .Type "directory"}}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          class="mx-1 size-5 self-center"
        >
          <path
            d="M4.75 3A1.75 1.75 0 0 0 3 4.75v2.752l.104-.002h13.792c.035 0 .07 0 .104.002V6.75A1.75 1.75 0 0 0 15.25 5h-3.836a.25.25 0 0 1-.177-.073L9.823 3.513A1.75 1.75 0 0 0 8.586 3H4.75ZM3.104 9a1.75 1.75 0 0 0-1.673 2.265l1.385 4.5A1.75 1.75 0 0 0 4.488 17h11.023a1.75 1.75 0 0 0 1.673-1.235l1.384-4.5A1.75 1.75 0 0 0 16.896 9H3.104Z"
          />
        </svg>
      {{else}}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          class="mx-1 size-5 self-center"
        >
          <path
            d="M3 3.5A1.5 1.5 0 0 1 4.5 2h6.879a1.5 1.5 0 0 1 1.06.44l4.122 4.12A1.5 1.5 0 0 1 17 7.622V16.5a1.5 1.5 0 0 1-1.5 1.5h-11A1.5 1.5 0 0 1 3 16.5v-13Z"
          />
        </svg>
      {{end}}
      <span>{{.BaseName}}</span>
    </div>
    {{if .Children}}
      <ul class="pl-3">
        {{range .Children}}
          <li>{{template "build_filesTreeFile" .}}</li>
        {{end}}
      </ul>
    {{end}}
  </div>
{{end}}
