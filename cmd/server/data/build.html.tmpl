<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PDF from Markdown | Brick</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Kanit:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
      rel="stylesheet"
    />
    <link rel="shortcut icon" href="/static/images/favicon.ico" />
    <link rel="stylesheet" href="/static/styles/kanit.css" />
    <script src="https://cdn.tailwindcss.com?plugins=forms"></script>
  </head>
  <body
    class="flex min-h-screen flex-col bg-white text-stone-700 dark:bg-stone-900 dark:text-stone-300"
  >
    {{template "app-header.html.tmpl"}}
    <main class="mb-auto p-5">
      <div class="container mx-auto">
        <h1 class="text-4xl font-extrabold text-stone-900 dark:text-white">
          New
        </h1>
        <p class="my-5">
          Upload input files and press the build button to start a new build.
        </p>
        <form id="build_form">
          <div
            id="build_document"
            class="my-5 rounded-lg border-2 border-dashed border-stone-200 px-5 py-20 dark:border-stone-700"
          >
            <p class="text-center">
              Drag and drop or
              <button
                type="button"
                id="build_documentInputButton"
                class="font-medium text-stone-900 underline dark:text-white"
              >
                choose files
              </button>
            </p>
            <input
              type="file"
              multiple
              id="build_documentInput"
              class="hidden"
            />
          </div>
          <div id="build_documentFormData" class="hidden"></div>
        </form>
        <div class="my-5 flex gap-x-2.5">
          <button
            type="button"
            id="build_buildButton"
            class="rounded-lg border-2 border-black bg-black px-5 py-2.5 font-semibold text-white hover:bg-[#1F1C1A] active:bg-stone-800 dark:border-white dark:bg-white dark:text-stone-900 dark:hover:bg-stone-100 dark:active:bg-stone-200"
          >
            Build
          </button>
          <button
            type="button"
            class="rounded-lg border-2 border-stone-200 bg-white px-5 py-2.5 font-semibold text-stone-900 hover:bg-stone-50 active:bg-stone-100 dark:border-stone-700 dark:bg-stone-900 dark:text-white dark:hover:bg-[#262221] dark:active:bg-stone-800"
          >
            Clear
          </button>
        </div>
      </div>
    </main>
    <script type="module">
      /**
       * @param {DirectoryReader} directoryReader
       * @returns {Promise<FileSystemEntry[]>}
       */
      async function readEntries(directoryReader) {
        return new Promise((resolve, reject) => {
          directoryReader.readEntries(resolve, reject);
        });
      }

      /**
       * @param {DirectoryReader} directoryReader
       * @returns {Promise<FileSystemEntry[]>}
       */
      async function readAllEntries(directoryReader) {
        let entries = [];
        let currEntries = await readEntries(directoryReader);
        while (currEntries.length > 0) {
          entries.push(...currEntries);
          currEntries = await readEntries(directoryReader);
        }
        return entries;
      }

      /**
       * @param {DataTransferItemList} dataTransferItems
       * @returns {Promise<FileSystemEntry[]>}
       */
      async function entriesFromDataTransferItems(dataTransferItems) {
        /** @type {FileSystemEntry[]} */
        let entries = [];
        /** @type {FileSystemEntry[]} */
        let queue = [];
        for (let i = 0; i < dataTransferItems.length; i++) {
          let entry = dataTransferItems[i].webkitGetAsEntry();
          if (entry === null) {
            throw new Error("item is not FileSystemEntry");
          }
          queue.push(entry);
        }
        while (queue.length > 0) {
          let entry = queue.shift();
          entries.push(entry);
          if (entry.isDirectory) {
            /** @type {FileSystemDirectoryEntry} */
            let directoryEntry = entry;
            let directoryReader = directoryEntry.createReader();
            queue.push(...(await readAllEntries(directoryReader)));
          }
        }
        return entries;
      }

      /**
       * @param {File} f
       * @returns {FileList}
       */
      function fileListFromFile(f) {
        let dataTransfer = new DataTransfer();
        dataTransfer.items.add(f);
        return dataTransfer.files;
      }

      let buildDocument = document.getElementById("build_document");
      if (buildDocument === null) {
        throw new Error("#build_document not found");
      }

      let dataFromElement = new WeakMap();
      dataFromElement.set(buildDocument, {});

      buildDocument.addEventListener("dragover", function (event) {
        event.preventDefault();
      });

      buildDocument.addEventListener("drop", async function (event) {
        event.preventDefault();

        let dataTransfer = event.dataTransfer;
        if (dataTransfer === null) {
          throw new Error("dataTransfer is null");
        }

        let inputs = [];
        let entries = await entriesFromDataTransferItems(dataTransfer.items);
        for (let [i, entry] of entries.entries()) {
          let nameInput = document.createElement("input");
          nameInput.type = "text";
          nameInput.name = `files/${i}/name`;
          nameInput.value = entry.fullPath;
          inputs.push(nameInput);

          let typeInput = document.createElement("input");
          typeInput.type = "text";
          typeInput.name = `files/${i}/type`;
          typeInput.value = entry.isFile ? "file" : "directory";
          inputs.push(typeInput);

          if (entry.isFile) {
            let dataInput = document.createElement("input");
            dataInput.type = "file";
            dataInput.name = `files/${i}/data`;
            dataInput.files = fileListFromFile(await file(entry));
            inputs.push(dataInput);
          }
        }

        let documentFormDataEl = document.getElementById(
          "build_documentFormData",
        );
        if (documentFormDataEl === null) {
          throw new Error("#build_documentFormData not found");
        }
        documentFormDataEl.replaceChildren(...inputs);
      });

      /**
       * @param {FileSystemFileEntry} fileEntry
       * @returns {Promise<File>}
       */
      async function file(fileEntry) {
        return new Promise((resolve, reject) => {
          fileEntry.file(resolve, reject);
        });
      }

      // build_buildButton.
      let buildButton = document.getElementById("build_buildButton");
      if (buildButton === null) {
        throw new Error("#build_buildButton not found");
      }
      buildButton.addEventListener("click", async function (event) {
        event.preventDefault();

        let buildDocument = document.getElementById("build_document");
        if (buildDocument === null) {
          throw new Error("#build_document not found");
        }

        let buildDocumentData = dataFromElement.get(buildDocument);
        if (buildDocumentData === undefined) {
          throw new Error("#build_document data not found");
        }

        let newEntries = buildDocumentData.newEntries;
        if (newEntries === undefined || newEntries.length === 0) {
          throw new Error("#build_document has no new entries");
        }

        /** @type {File[]} */
        let files = [];
        for (let e of newEntries) {
          if (e.isFile) {
            /** @type {FileSystemFileEntry} */
            let fileEntry = e;
            files.push(await file(fileEntry));
          }
        }
        console.log(files);
      });

      // build_documentInput.
      let documentInput = document.getElementById("build_documentInput");
      if (documentInput === null) {
        throw new Error("#build_documentInput not found");
      }
      documentInput.addEventListener("change", async function (event) {
        event.preventDefault();

        let inputs = [];
        let files = event.target.files;
        for (let i = 0; i < files.length; i++) {
          let nameInput = document.createElement("input");
          nameInput.type = "text";
          nameInput.name = `files/${i}/name`;
          nameInput.value = files[i].name;
          inputs.push(nameInput);

          let typeInput = document.createElement("input");
          typeInput.type = "text";
          typeInput.name = `files/${i}/type`;
          typeInput.value = "file";
          inputs.push(typeInput);

          let dataInput = document.createElement("input");
          dataInput.type = "file";
          dataInput.name = `files/${i}/data`;
          dataInput.files = fileListFromFile(files[i]);
          inputs.push(dataInput);
        }

        let documentFormDataEl = document.getElementById(
          "build_documentFormData",
        );
        if (documentFormDataEl === null) {
          throw new Error("#build_documentFormData not found");
        }
        documentFormDataEl.replaceChildren(...inputs);
      });

      // build_documentInputButton.
      let documentInputButton = document.getElementById(
        "build_documentInputButton",
      );
      if (documentInputButton === null) {
        throw new Error("#build_documentInputButton not found");
      }
      documentInputButton.addEventListener("click", async function (event) {
        event.preventDefault();
        let documentInput = document.getElementById("build_documentInput");
        if (documentInput === null) {
          throw new Error("#build_documentInput not found");
        }
        documentInput.click();
      });
    </script>
    {{template "app-footer.html.tmpl"}}
  </body>
</html>
